/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.citi.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DEPARTMENT extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2556838011804230524L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DEPARTMENT\",\"namespace\":\"com.citi.schema\",\"fields\":[{\"name\":\"ID\",\"type\":\"string\"},{\"name\":\"KID\",\"type\":\"long\"},{\"name\":\"DNAME\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CREATED_DATE\",\"type\":{\"type\":\"long\",\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"connect.version\":1,\"logicalType\":\"timestamp-millis\"}},{\"name\":\"MODIFIED_DATE\",\"type\":{\"type\":\"long\",\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"connect.version\":1,\"logicalType\":\"timestamp-millis\"}}],\"connect.name\":\"DEPARTMENT\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<DEPARTMENT> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DEPARTMENT> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DEPARTMENT> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DEPARTMENT> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DEPARTMENT> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DEPARTMENT to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DEPARTMENT from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DEPARTMENT instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DEPARTMENT fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence ID;
  private long KID;
  private java.lang.CharSequence DNAME;
  private java.time.Instant CREATED_DATE;
  private java.time.Instant MODIFIED_DATE;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DEPARTMENT() {}

  /**
   * All-args constructor.
   * @param ID The new value for ID
   * @param KID The new value for KID
   * @param DNAME The new value for DNAME
   * @param CREATED_DATE The new value for CREATED_DATE
   * @param MODIFIED_DATE The new value for MODIFIED_DATE
   */
  public DEPARTMENT(java.lang.CharSequence ID, java.lang.Long KID, java.lang.CharSequence DNAME, java.time.Instant CREATED_DATE, java.time.Instant MODIFIED_DATE) {
    this.ID = ID;
    this.KID = KID;
    this.DNAME = DNAME;
    this.CREATED_DATE = CREATED_DATE.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.MODIFIED_DATE = MODIFIED_DATE.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ID;
    case 1: return KID;
    case 2: return DNAME;
    case 3: return CREATED_DATE;
    case 4: return MODIFIED_DATE;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ID = (java.lang.CharSequence)value$; break;
    case 1: KID = (java.lang.Long)value$; break;
    case 2: DNAME = (java.lang.CharSequence)value$; break;
    case 3: CREATED_DATE = (java.time.Instant)value$; break;
    case 4: MODIFIED_DATE = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'ID' field.
   * @return The value of the 'ID' field.
   */
  public java.lang.CharSequence getID() {
    return ID;
  }


  /**
   * Sets the value of the 'ID' field.
   * @param value the value to set.
   */
  public void setID(java.lang.CharSequence value) {
    this.ID = value;
  }

  /**
   * Gets the value of the 'KID' field.
   * @return The value of the 'KID' field.
   */
  public long getKID() {
    return KID;
  }


  /**
   * Sets the value of the 'KID' field.
   * @param value the value to set.
   */
  public void setKID(long value) {
    this.KID = value;
  }

  /**
   * Gets the value of the 'DNAME' field.
   * @return The value of the 'DNAME' field.
   */
  public java.lang.CharSequence getDNAME() {
    return DNAME;
  }


  /**
   * Sets the value of the 'DNAME' field.
   * @param value the value to set.
   */
  public void setDNAME(java.lang.CharSequence value) {
    this.DNAME = value;
  }

  /**
   * Gets the value of the 'CREATED_DATE' field.
   * @return The value of the 'CREATED_DATE' field.
   */
  public java.time.Instant getCREATEDDATE() {
    return CREATED_DATE;
  }


  /**
   * Sets the value of the 'CREATED_DATE' field.
   * @param value the value to set.
   */
  public void setCREATEDDATE(java.time.Instant value) {
    this.CREATED_DATE = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'MODIFIED_DATE' field.
   * @return The value of the 'MODIFIED_DATE' field.
   */
  public java.time.Instant getMODIFIEDDATE() {
    return MODIFIED_DATE;
  }


  /**
   * Sets the value of the 'MODIFIED_DATE' field.
   * @param value the value to set.
   */
  public void setMODIFIEDDATE(java.time.Instant value) {
    this.MODIFIED_DATE = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new DEPARTMENT RecordBuilder.
   * @return A new DEPARTMENT RecordBuilder
   */
  public static com.citi.schema.DEPARTMENT.Builder newBuilder() {
    return new com.citi.schema.DEPARTMENT.Builder();
  }

  /**
   * Creates a new DEPARTMENT RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DEPARTMENT RecordBuilder
   */
  public static com.citi.schema.DEPARTMENT.Builder newBuilder(com.citi.schema.DEPARTMENT.Builder other) {
    if (other == null) {
      return new com.citi.schema.DEPARTMENT.Builder();
    } else {
      return new com.citi.schema.DEPARTMENT.Builder(other);
    }
  }

  /**
   * Creates a new DEPARTMENT RecordBuilder by copying an existing DEPARTMENT instance.
   * @param other The existing instance to copy.
   * @return A new DEPARTMENT RecordBuilder
   */
  public static com.citi.schema.DEPARTMENT.Builder newBuilder(com.citi.schema.DEPARTMENT other) {
    if (other == null) {
      return new com.citi.schema.DEPARTMENT.Builder();
    } else {
      return new com.citi.schema.DEPARTMENT.Builder(other);
    }
  }

  /**
   * RecordBuilder for DEPARTMENT instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DEPARTMENT>
    implements org.apache.avro.data.RecordBuilder<DEPARTMENT> {

    private java.lang.CharSequence ID;
    private long KID;
    private java.lang.CharSequence DNAME;
    private java.time.Instant CREATED_DATE;
    private java.time.Instant MODIFIED_DATE;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.citi.schema.DEPARTMENT.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.KID)) {
        this.KID = data().deepCopy(fields()[1].schema(), other.KID);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.DNAME)) {
        this.DNAME = data().deepCopy(fields()[2].schema(), other.DNAME);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.CREATED_DATE)) {
        this.CREATED_DATE = data().deepCopy(fields()[3].schema(), other.CREATED_DATE);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.MODIFIED_DATE)) {
        this.MODIFIED_DATE = data().deepCopy(fields()[4].schema(), other.MODIFIED_DATE);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing DEPARTMENT instance
     * @param other The existing instance to copy.
     */
    private Builder(com.citi.schema.DEPARTMENT other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.KID)) {
        this.KID = data().deepCopy(fields()[1].schema(), other.KID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.DNAME)) {
        this.DNAME = data().deepCopy(fields()[2].schema(), other.DNAME);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.CREATED_DATE)) {
        this.CREATED_DATE = data().deepCopy(fields()[3].schema(), other.CREATED_DATE);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.MODIFIED_DATE)) {
        this.MODIFIED_DATE = data().deepCopy(fields()[4].schema(), other.MODIFIED_DATE);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'ID' field.
      * @return The value.
      */
    public java.lang.CharSequence getID() {
      return ID;
    }


    /**
      * Sets the value of the 'ID' field.
      * @param value The value of 'ID'.
      * @return This builder.
      */
    public com.citi.schema.DEPARTMENT.Builder setID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ID' field has been set.
      * @return True if the 'ID' field has been set, false otherwise.
      */
    public boolean hasID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ID' field.
      * @return This builder.
      */
    public com.citi.schema.DEPARTMENT.Builder clearID() {
      ID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'KID' field.
      * @return The value.
      */
    public long getKID() {
      return KID;
    }


    /**
      * Sets the value of the 'KID' field.
      * @param value The value of 'KID'.
      * @return This builder.
      */
    public com.citi.schema.DEPARTMENT.Builder setKID(long value) {
      validate(fields()[1], value);
      this.KID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'KID' field has been set.
      * @return True if the 'KID' field has been set, false otherwise.
      */
    public boolean hasKID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'KID' field.
      * @return This builder.
      */
    public com.citi.schema.DEPARTMENT.Builder clearKID() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'DNAME' field.
      * @return The value.
      */
    public java.lang.CharSequence getDNAME() {
      return DNAME;
    }


    /**
      * Sets the value of the 'DNAME' field.
      * @param value The value of 'DNAME'.
      * @return This builder.
      */
    public com.citi.schema.DEPARTMENT.Builder setDNAME(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.DNAME = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'DNAME' field has been set.
      * @return True if the 'DNAME' field has been set, false otherwise.
      */
    public boolean hasDNAME() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'DNAME' field.
      * @return This builder.
      */
    public com.citi.schema.DEPARTMENT.Builder clearDNAME() {
      DNAME = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'CREATED_DATE' field.
      * @return The value.
      */
    public java.time.Instant getCREATEDDATE() {
      return CREATED_DATE;
    }


    /**
      * Sets the value of the 'CREATED_DATE' field.
      * @param value The value of 'CREATED_DATE'.
      * @return This builder.
      */
    public com.citi.schema.DEPARTMENT.Builder setCREATEDDATE(java.time.Instant value) {
      validate(fields()[3], value);
      this.CREATED_DATE = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'CREATED_DATE' field has been set.
      * @return True if the 'CREATED_DATE' field has been set, false otherwise.
      */
    public boolean hasCREATEDDATE() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'CREATED_DATE' field.
      * @return This builder.
      */
    public com.citi.schema.DEPARTMENT.Builder clearCREATEDDATE() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'MODIFIED_DATE' field.
      * @return The value.
      */
    public java.time.Instant getMODIFIEDDATE() {
      return MODIFIED_DATE;
    }


    /**
      * Sets the value of the 'MODIFIED_DATE' field.
      * @param value The value of 'MODIFIED_DATE'.
      * @return This builder.
      */
    public com.citi.schema.DEPARTMENT.Builder setMODIFIEDDATE(java.time.Instant value) {
      validate(fields()[4], value);
      this.MODIFIED_DATE = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'MODIFIED_DATE' field has been set.
      * @return True if the 'MODIFIED_DATE' field has been set, false otherwise.
      */
    public boolean hasMODIFIEDDATE() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'MODIFIED_DATE' field.
      * @return This builder.
      */
    public com.citi.schema.DEPARTMENT.Builder clearMODIFIEDDATE() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DEPARTMENT build() {
      try {
        DEPARTMENT record = new DEPARTMENT();
        record.ID = fieldSetFlags()[0] ? this.ID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.KID = fieldSetFlags()[1] ? this.KID : (java.lang.Long) defaultValue(fields()[1]);
        record.DNAME = fieldSetFlags()[2] ? this.DNAME : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.CREATED_DATE = fieldSetFlags()[3] ? this.CREATED_DATE : (java.time.Instant) defaultValue(fields()[3]);
        record.MODIFIED_DATE = fieldSetFlags()[4] ? this.MODIFIED_DATE : (java.time.Instant) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DEPARTMENT>
    WRITER$ = (org.apache.avro.io.DatumWriter<DEPARTMENT>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DEPARTMENT>
    READER$ = (org.apache.avro.io.DatumReader<DEPARTMENT>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










